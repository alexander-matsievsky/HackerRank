{-# LANGUAGE TemplateHaskell #-}
module FunctionsAndFractalsSierpinskiTriangles(runTests) where
import           Debug.Trace
import           Test.QuickCheck
import           Test.QuickCheck.All

main :: IO ()
main = interact run

run :: String -> String
run input = trace output output where
    n = read input
    (rows, columns) = (32, 63)
    output = drawSierpinski (columns - 1, rows - 1) n

data Triangle = Triangle {
    top         :: (Double, Double),
    bottomLeft  :: (Double, Double),
    bottomRight :: (Double, Double)
} deriving (Show)

section :: Triangle -> (Triangle, [Triangle])
section triangle = (exclude, include) where
            left = fromIntegral . floor
            right = fromIntegral . ceiling
            (xt, yt) = top triangle
            (xbl, ybl) = bottomLeft triangle
            (xbr, ybr) = bottomRight triangle
            middleLeft = (left $ xt - ((xt - xbl) / 2), yt - ((yt - ybl) / 2))
            middleRight = (right $ xt + ((xbr - xt) / 2), yt - ((yt - ybr) / 2))
            bottomCenter = (xt, ybl)
            exclude = Triangle {top = bottomCenter, bottomLeft = middleLeft, bottomRight = middleRight}
            include =
                [Triangle {top = top triangle, bottomLeft = middleLeft, bottomRight = middleRight},
                Triangle {top = middleLeft, bottomLeft = bottomLeft triangle, bottomRight = bottomCenter},
                Triangle {top = middleRight, bottomLeft = bottomCenter, bottomRight = bottomRight triangle}]

withinTriangle :: Bool -> (Double, Double) -> Triangle -> Bool
withinTriangle exclusive point triangle = w1 == w2 && w2 == w3 where
    w1 = within' point (top triangle) (bottomRight triangle)
    w2 = within' point (bottomRight triangle) (bottomLeft triangle)
    w3 = within' point (bottomLeft triangle) (top triangle)
    within' (x1, y1) (x2, y2) (x3, y3)
        | exclusive = 0 > (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)
        | otherwise = 0 >= (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)

sierpinski :: (Double, Double) -> Int -> (Triangle, [Triangle])
sierpinski (width, height) iteration = canvas !! iteration where
    canvas = zip (repeat iteration0Triangle) ([]:unfoldr iterate' ([], [iteration0Triangle]))
    iteration0Triangle = Triangle {top = (width / 2, height), bottomLeft = (0, 0), bottomRight = (width, 0)}
    iterate' (prevExclude, prevInclude) =
        let (exclude, include) = unzip . map section $ prevInclude
            (nextExclude, nextInclude) = (prevExclude ++ exclude, concat include)
        in Just (nextExclude, (nextExclude, nextInclude))

drawSierpinski :: (Double, Double) -> Int -> String
drawSierpinski (width, height) iteration = unlines pixels where
    (include, exclude) = sierpinski (width, height) iteration
    pixel match = if match then '1' else '_'
    pixels = [[pixel $ withinTriangle False (x, y) include && (not . any (withinTriangle True (x, y)) $ exclude)
        | x <- [0..width]]
        | y <- [height, (height - 1) ..0]]

unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
unfoldr f b = maybe [] (\(a, b') -> a:unfoldr f b') $ f b

prop_run = run "0" == unlines [
    "_______________________________1_______________________________",
    "______________________________111______________________________",
    "_____________________________11111_____________________________",
    "____________________________1111111____________________________",
    "___________________________111111111___________________________",
    "__________________________11111111111__________________________",
    "_________________________1111111111111_________________________",
    "________________________111111111111111________________________",
    "_______________________11111111111111111_______________________",
    "______________________1111111111111111111______________________",
    "_____________________111111111111111111111_____________________",
    "____________________11111111111111111111111____________________",
    "___________________1111111111111111111111111___________________",
    "__________________111111111111111111111111111__________________",
    "_________________11111111111111111111111111111_________________",
    "________________1111111111111111111111111111111________________",
    "_______________111111111111111111111111111111111_______________",
    "______________11111111111111111111111111111111111______________",
    "_____________1111111111111111111111111111111111111_____________",
    "____________111111111111111111111111111111111111111____________",
    "___________11111111111111111111111111111111111111111___________",
    "__________1111111111111111111111111111111111111111111__________",
    "_________111111111111111111111111111111111111111111111_________",
    "________11111111111111111111111111111111111111111111111________",
    "_______1111111111111111111111111111111111111111111111111_______",
    "______111111111111111111111111111111111111111111111111111______",
    "_____11111111111111111111111111111111111111111111111111111_____",
    "____1111111111111111111111111111111111111111111111111111111____",
    "___111111111111111111111111111111111111111111111111111111111___",
    "__11111111111111111111111111111111111111111111111111111111111__",
    "_1111111111111111111111111111111111111111111111111111111111111_",
    "111111111111111111111111111111111111111111111111111111111111111"]

prop_run1 = run "1" == unlines [
    "_______________________________1_______________________________",
    "______________________________111______________________________",
    "_____________________________11111_____________________________",
    "____________________________1111111____________________________",
    "___________________________111111111___________________________",
    "__________________________11111111111__________________________",
    "_________________________1111111111111_________________________",
    "________________________111111111111111________________________",
    "_______________________11111111111111111_______________________",
    "______________________1111111111111111111______________________",
    "_____________________111111111111111111111_____________________",
    "____________________11111111111111111111111____________________",
    "___________________1111111111111111111111111___________________",
    "__________________111111111111111111111111111__________________",
    "_________________11111111111111111111111111111_________________",
    "________________1111111111111111111111111111111________________",
    "_______________1_______________________________1_______________",
    "______________111_____________________________111______________",
    "_____________11111___________________________11111_____________",
    "____________1111111_________________________1111111____________",
    "___________111111111_______________________111111111___________",
    "__________11111111111_____________________11111111111__________",
    "_________1111111111111___________________1111111111111_________",
    "________111111111111111_________________111111111111111________",
    "_______11111111111111111_______________11111111111111111_______",
    "______1111111111111111111_____________1111111111111111111______",
    "_____111111111111111111111___________111111111111111111111_____",
    "____11111111111111111111111_________11111111111111111111111____",
    "___1111111111111111111111111_______1111111111111111111111111___",
    "__111111111111111111111111111_____111111111111111111111111111__",
    "_11111111111111111111111111111___11111111111111111111111111111_",
    "1111111111111111111111111111111_1111111111111111111111111111111"]

prop_run2 = run "2" == unlines [
    "_______________________________1_______________________________",
    "______________________________111______________________________",
    "_____________________________11111_____________________________",
    "____________________________1111111____________________________",
    "___________________________111111111___________________________",
    "__________________________11111111111__________________________",
    "_________________________1111111111111_________________________",
    "________________________111111111111111________________________",
    "_______________________1_______________1_______________________",
    "______________________111_____________111______________________",
    "_____________________11111___________11111_____________________",
    "____________________1111111_________1111111____________________",
    "___________________111111111_______111111111___________________",
    "__________________11111111111_____11111111111__________________",
    "_________________1111111111111___1111111111111_________________",
    "________________111111111111111_111111111111111________________",
    "_______________1_______________________________1_______________",
    "______________111_____________________________111______________",
    "_____________11111___________________________11111_____________",
    "____________1111111_________________________1111111____________",
    "___________111111111_______________________111111111___________",
    "__________11111111111_____________________11111111111__________",
    "_________1111111111111___________________1111111111111_________",
    "________111111111111111_________________111111111111111________",
    "_______1_______________1_______________1_______________1_______",
    "______111_____________111_____________111_____________111______",
    "_____11111___________11111___________11111___________11111_____",
    "____1111111_________1111111_________1111111_________1111111____",
    "___111111111_______111111111_______111111111_______111111111___",
    "__11111111111_____11111111111_____11111111111_____11111111111__",
    "_1111111111111___1111111111111___1111111111111___1111111111111_",
    "111111111111111_111111111111111_111111111111111_111111111111111"]

prop_run3 = run "3" /= ""
prop_run4 = run "4" /= ""

return []
runTests = $quickCheckAll
